<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Spring 協同產品設計實習 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-06-14T09:00:00+08:00</updated><entry><title>2017/06/14 W17 上課筆記</title><link href="./2017spring-cd-W17.html" rel="alternate"></link><published>2017-06-14T09:00:00+08:00</published><updated>2017-06-14T09:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-06-14:./2017spring-cd-W17.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;ol&gt;
&lt;li&gt;各組員倉儲中的 Github 檔案推送&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe src="./../data/W17/onelink.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;p&gt;2.各組員網誌上的 2D 繪圖, 並將程式碼顯示在繪圖網誌文章中
&lt;pre&gt;
ѲԓolveSpaceREVa&lt;/p&gt;
&lt;p&gt;Group.h.v=00000001
Group.type=5000
Group.name=#references
Group.color=ff000000
Group.skipFirst=0
Group.predef.swapUV=0
Group.predef.negateU=0
Group.predef.negateV=0
Group.visible=1
Group.suppress=0
Group.relaxConstraints=0
Group.allowRedundant=0
Group.allDimsReference=0
Group.scale=1.00000000000000000000
Group.remap={
}
AddGroup&lt;/p&gt;
&lt;p&gt;Group.h.v=00000002
Group.type=5001
Group.order=1
Group.name=sketch-in-plane
Group.activeWorkplane.v=80020000
Group.color=ff000000
Group.subtype=6000
Group.skipFirst=0
Group.predef.q.w=1.00000000000000000000
Group.predef.origin.v=00010001
Group.predef.swapUV=0
Group.predef.negateU=0
Group.predef.negateV=0
Group.visible=1
Group.suppress=0
Group.relaxConstraints=0
Group.allowRedundant=0
Group.allDimsReference=0
Group.scale=1.00000000000000000000
Group.remap={
}
AddGroup&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010010
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010011
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010012
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010020
Param.val=1.00000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010021
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010022
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00010023
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020010
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020011
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020012
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020020
Param.val=0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020021
Param.val=0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020022
Param.val=0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00020023
Param.val=0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030010
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030011
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030012
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030020
Param.val=0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030021
Param.val=-0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030022
Param.val=-0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00030023
Param.val=-0.50000000000000000000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00040010
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00040011
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00040013
Param.val=-65.13708270270950600000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00040014
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00050010
Param.val=-65.13708270270950600000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00050011
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00050013
Param.val=21.43947050898545800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00050014
Param.val=13.24899540854043800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00060010
Param.val=-13.03274144656848500000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00060011
Param.val=67.79830360123288800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00060013
Param.val=-4.08714042476284160000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00060014
Param.val=9.34260345239653840000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00070010
Param.val=-6.59108312004985030000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00070011
Param.val=66.15766880680263300000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00070013
Param.val=-42.40928437475207600000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00070014
Param.val=19.10292285690249200000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00080010
Param.val=-11.74544004728432800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00080011
Param.val=59.38633615328794200000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00090010
Param.val=-24.23859277695014600000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00090011
Param.val=42.97395062818981200000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00090013
Param.val=-46.13364093994704300000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00090014
Param.val=22.46524842790306700000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00090016
Param.val=-38.17663168285127300000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=00090017
Param.val=16.40835122863575900000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000a0010
Param.val=-8.62527331893973150000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000a0011
Param.val=38.99737288051365900000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000a0013
Param.val=-9.09307551224933520000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000a0014
Param.val=9.00102041712347050000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000a0016
Param.val=0.79184763045633066000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000a0017
Param.val=10.51373138184909500000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000b0010
Param.val=-46.13364093994704300000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000b0011
Param.val=22.46524842790306700000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000b0013
Param.val=-38.17663168285127300000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000b0014
Param.val=16.40835122863575900000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000c0010
Param.val=-9.09307551224933520000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000c0011
Param.val=9.00102041712347050000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000c0013
Param.val=0.79184763045633066000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000c0014
Param.val=10.51373138184909500000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000d0010
Param.val=-13.03274144656848500000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000d0011
Param.val=67.79830360123288800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000d0013
Param.val=-11.74544004728432800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000d0014
Param.val=59.38633615328794200000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000e0010
Param.val=-6.59108312004985030000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000e0011
Param.val=66.15766880680263300000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000e0013
Param.val=-11.74544004728432800000
AddParam&lt;/p&gt;
&lt;p&gt;Param.h.v.=000e0014
Param.val=59.38633615328794200000
AddParam&lt;/p&gt;
&lt;p&gt;Request.h.v=00000001
Request.type=100
Request.group.v=00000001
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000002
Request.type=100
Request.group.v=00000001
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000003
Request.type=100
Request.group.v=00000001
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000004
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000005
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000006
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000007
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000008
Request.type=101
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=00000009
Request.type=500
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=0000000a
Request.type=500
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=0000000b
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=0000000c
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=0
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=0000000d
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=1
AddRequest&lt;/p&gt;
&lt;p&gt;Request.h.v=0000000e
Request.type=200
Request.workplane.v=80020000
Request.group.v=00000002
Request.construction=1
AddRequest&lt;/p&gt;
&lt;p&gt;Entity.h.v=00010000
Entity.type=10000
Entity.construction=0
Entity.point[0].v=00010001
Entity.normal.v=00010020
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00010001
Entity.type=2000
Entity.construction=0
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00010020
Entity.type=3000
Entity.construction=0
Entity.point[0].v=00010001
Entity.actNormal.w=1.00000000000000000000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00020000
Entity.type=10000
Entity.construction=0
Entity.point[0].v=00020001
Entity.normal.v=00020020
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00020001
Entity.type=2000
Entity.construction=0
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00020020
Entity.type=3000
Entity.construction=0
Entity.point[0].v=00020001
Entity.actNormal.w=0.50000000000000000000
Entity.actNormal.vx=0.50000000000000000000
Entity.actNormal.vy=0.50000000000000000000
Entity.actNormal.vz=0.50000000000000000000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00030000
Entity.type=10000
Entity.construction=0
Entity.point[0].v=00030001
Entity.normal.v=00030020
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00030001
Entity.type=2000
Entity.construction=0
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00030020
Entity.type=3000
Entity.construction=0
Entity.point[0].v=00030001
Entity.actNormal.w=0.50000000000000000000
Entity.actNormal.vx=-0.50000000000000000000
Entity.actNormal.vy=-0.50000000000000000000
Entity.actNormal.vz=-0.50000000000000000000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00040000
Entity.type=11000
Entity.construction=0
Entity.point[0].v=00040001
Entity.point[1].v=00040002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00040001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00040002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-65.13708270270950600000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00050000
Entity.type=11000
Entity.construction=0
Entity.point[0].v=00050001
Entity.point[1].v=00050002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00050001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-65.13708270270950600000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00050002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=21.43947050898545800000
Entity.actPoint.y=13.24899540854043800000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00060000
Entity.type=11000
Entity.construction=0
Entity.point[0].v=00060001
Entity.point[1].v=00060002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00060001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-13.03274144656848500000
Entity.actPoint.y=67.79830360123288800000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00060002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-4.08714042476284160000
Entity.actPoint.y=9.34260345239653840000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00070000
Entity.type=11000
Entity.construction=0
Entity.point[0].v=00070001
Entity.point[1].v=00070002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00070001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-6.59108312004985030000
Entity.actPoint.y=66.15766880680263300000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00070002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-42.40928437475207600000
Entity.actPoint.y=19.10292285690249200000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00080000
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-11.74544004728432800000
Entity.actPoint.y=59.38633615328794200000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00090000
Entity.type=14000
Entity.construction=0
Entity.point[0].v=00090001
Entity.point[1].v=00090002
Entity.point[2].v=00090003
Entity.normal.v=00090020
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00090001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-24.23859277695014600000
Entity.actPoint.y=42.97395062818981200000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00090002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-46.13364093994704300000
Entity.actPoint.y=22.46524842790306700000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00090003
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-38.17663168285127300000
Entity.actPoint.y=16.40835122863575900000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=00090020
Entity.type=3001
Entity.construction=0
Entity.point[0].v=00090001
Entity.workplane.v=80020000
Entity.actNormal.w=1.00000000000000000000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000a0000
Entity.type=14000
Entity.construction=0
Entity.point[0].v=000a0001
Entity.point[1].v=000a0002
Entity.point[2].v=000a0003
Entity.normal.v=000a0020
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000a0001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-8.62527331893973150000
Entity.actPoint.y=38.99737288051365900000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000a0002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-9.09307551224933520000
Entity.actPoint.y=9.00102041712347050000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000a0003
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=0.79184763045633066000
Entity.actPoint.y=10.51373138184909500000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000a0020
Entity.type=3001
Entity.construction=0
Entity.point[0].v=000a0001
Entity.workplane.v=80020000
Entity.actNormal.w=1.00000000000000000000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000b0000
Entity.type=11000
Entity.construction=0
Entity.point[0].v=000b0001
Entity.point[1].v=000b0002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000b0001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-46.13364093994704300000
Entity.actPoint.y=22.46524842790306700000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000b0002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-38.17663168285127300000
Entity.actPoint.y=16.40835122863575900000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000c0000
Entity.type=11000
Entity.construction=0
Entity.point[0].v=000c0001
Entity.point[1].v=000c0002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000c0001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-9.09307551224933520000
Entity.actPoint.y=9.00102041712347050000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000c0002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=0.79184763045633066000
Entity.actPoint.y=10.51373138184909500000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000d0000
Entity.type=11000
Entity.construction=1
Entity.point[0].v=000d0001
Entity.point[1].v=000d0002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000d0001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-13.03274144656848500000
Entity.actPoint.y=67.79830360123288800000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000d0002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-11.74544004728432800000
Entity.actPoint.y=59.38633615328794200000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000e0000
Entity.type=11000
Entity.construction=1
Entity.point[0].v=000e0001
Entity.point[1].v=000e0002
Entity.workplane.v=80020000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000e0001
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-6.59108312004985030000
Entity.actPoint.y=66.15766880680263300000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=000e0002
Entity.type=2001
Entity.construction=0
Entity.workplane.v=80020000
Entity.actPoint.x=-11.74544004728432800000
Entity.actPoint.y=59.38633615328794200000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=80020000
Entity.type=10000
Entity.construction=0
Entity.point[0].v=80020002
Entity.normal.v=80020001
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=80020001
Entity.type=3010
Entity.construction=0
Entity.point[0].v=80020002
Entity.actNormal.w=1.00000000000000000000
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Entity.h.v=80020002
Entity.type=2012
Entity.construction=0
Entity.actVisible=1
AddEntity&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000001
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00010001
Constraint.ptB.v=00040001
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000002
Constraint.type=80
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=00040000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000003
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00040002
Constraint.ptB.v=00050001
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000004
Constraint.type=42
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00060002
Constraint.entityA.v=00050000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000005
Constraint.type=122
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=00060000
Constraint.entityB.v=00050000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000006
Constraint.type=50
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=00070000
Constraint.entityB.v=00060000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000007
Constraint.type=42
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00080000
Constraint.entityA.v=00060000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000008
Constraint.type=42
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00080000
Constraint.entityA.v=00070000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000009
Constraint.type=100
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00070002
Constraint.entityA.v=00090000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000000a
Constraint.type=42
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00090001
Constraint.entityA.v=00070000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000000b
Constraint.type=100
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00060002
Constraint.entityA.v=000a0000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000000c
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00090002
Constraint.ptB.v=000b0001
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000000d
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00090003
Constraint.ptB.v=000b0002
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000000e
Constraint.type=122
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=000b0000
Constraint.entityB.v=00070000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000000f
Constraint.type=32
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.valA=-5.00000000000000000000
Constraint.ptA.v=00090003
Constraint.entityA.v=00070000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
Constraint.disp.offset.x=3.18153077846365000000
Constraint.disp.offset.y=3.40479609625057260000
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000010
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=000a0002
Constraint.ptB.v=000c0001
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000011
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=000a0003
Constraint.ptB.v=000c0002
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000012
Constraint.type=122
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=000c0000
Constraint.entityB.v=00060000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000013
Constraint.type=42
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=000a0001
Constraint.entityA.v=00060000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000014
Constraint.type=32
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.valA=-5.00000000000000000000
Constraint.ptA.v=000a0003
Constraint.entityA.v=00060000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
Constraint.disp.offset.x=0.22326531778692280000
Constraint.disp.offset.y=2.90244913122999600000
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000015
Constraint.type=90
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.valA=60.00000000000000000000
Constraint.entityA.v=00090000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
Constraint.disp.offset.x=9.34715434956562060000
Constraint.disp.offset.y=12.26642875514404800000
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000016
Constraint.type=130
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=000a0000
Constraint.entityB.v=00090000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000017
Constraint.type=50
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.entityA.v=000e0000
Constraint.entityB.v=000d0000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000018
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=000d0001
Constraint.ptB.v=00060001
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=00000019
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=000d0002
Constraint.ptB.v=00080000
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000001a
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00080000
Constraint.ptB.v=000e0002
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;p&gt;Constraint.h.v=0000001b
Constraint.type=20
Constraint.group.v=00000002
Constraint.workplane.v=80020000
Constraint.ptA.v=00070001
Constraint.ptB.v=000e0001
Constraint.other=0
Constraint.other2=0
Constraint.reference=0
AddConstraint&lt;/p&gt;
&lt;/pre&gt;</summary><category term="notes"></category><category term="w17"></category></entry><entry><title>2017/06/07 W16 上課筆記</title><link href="./2017spring-cd-W16.html" rel="alternate"></link><published>2017-06-07T09:00:00+08:00</published><updated>2017-06-07T09:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-06-07:./2017spring-cd-W16.html</id><summary type="html">&lt;p&gt;練習如何遠端連結Fossil伺服器&lt;/p&gt;


&lt;p&gt;老師第一節課介紹如何利用Xming連結Fossil伺服器&lt;/p&gt;
&lt;p&gt;第二節讓我們去聆聽學長們的專題報告&lt;/p&gt;
&lt;p&gt;第三四節的報告延至下週&lt;/p&gt;</summary><category term="notes"></category><category term="w16"></category></entry><entry><title>協同產品設計實習第十五週練習</title><link href="./2017spring-cd-W15.html" rel="alternate"></link><published>2017-05-31T09:00:00+08:00</published><updated>2017-05-31T09:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-05-31:./2017spring-cd-W15.html</id><summary type="html">&lt;p&gt;利用brython繪製正齒輪以及半尺型的正齒輪，接著利用submodule繪製齒輪組，並在Onshape中繪製再一遍齒輪組，並將過程紀錄。&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;p&gt;&lt;h3&gt;1. 請以 W15 練習為網誌標題, 800x600 為畫布大小, 在畫布正中央畫一個半徑為 250 畫素, 壓力角 20, 齒數為 36 齒的漸開線正齒輪輪廓.&lt;/h3&gt;&lt;/p&gt;
&lt;!-- 以下實際利用  Brython 繪圖正齒輪--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.fillStytle = "#000000"
ctx.font = "40px ScriptS"
ctx.fillText("40423245",x-50,y)
ctx.stroke()

&lt;/script&gt;

&lt;h3&gt;2. 完成後, 請在正齒輪中央寫上自己的學號, 並建立第二個 800x600 的畫布, 請畫出只有上半齒形的漸開線正齒輪輪廓 , 且該齒輪廓下方水平線, 連接兩端齒根圓點交的直線以紅色繪製, 且在齒輪下方以藍色字元寫上自己的學號.&lt;/h3&gt;

&lt;!-- 以下實際利用  Brython 繪圖半齒型正齒輪--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx-rp, midy, midx+rp, midy)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(-9,10,+1):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.fillStytle = "#000000"
ctx.font = "40px ScriptS"
ctx.fillText("40423245",x-50,y)
ctx.stroke()

&lt;/script&gt;

&lt;h4&gt; 3. 請各學員在各自 github 倉儲中的 data/py 目錄中, 編寫一個可以採圓心座標, 節圓半徑, 齒數, 壓力角與定位角度作為輸入的齒輪程式函式, 交由組長從各組員的 submodule 設定中呼叫導入, 以便在各分組的網頁中完成一個畫出所有組員協同繪圖的齒輪減速組圖, 且各齒輪正中心必須寫上組員學號, 各組按照學號大小排序, 分別由最右邊齒數 16 齒開始囓合, 依序增加 2 齒, 當排至平面四齒囓合後, 第五位組員則以垂直方向向下囓合兩個齒輪後, 轉由右至左水平排列, 直至所有組員均各提供一個協同囓合用的齒輪為止.&lt;/h4&gt;

&lt;!-- 以下實際利用  Brython 繪圖齒輪組--&gt;

&lt;canvas id='gear3' width='800' height='600'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 16
# 第2齒輪齒數
n_g2 = 18
# 第3齒輪齒數
n_g3 = 20
# 第4齒輪齒數
n_g4 = 22
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3+n_g4)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
rp_g4 = m*n_g4/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.2+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1
# 第4齒輪的圓心座標
x_g4 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g4 = y_g1

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "blue")
ctx.restore()

ctx.beginPath()
ctx.fillStytle = "#0000ff"
ctx.font = "20px ScriptS"
ctx.fillText("40423222",x_g1-30,y_g1)
ctx.stroke()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "black")
ctx.restore()

ctx.beginPath()
ctx.fillStytle = "#000000"
ctx.font = "20px ScriptS"
ctx.fillText("40423228",x_g2-30,y_g2)
ctx.stroke()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "red")
ctx.restore()

ctx.beginPath()
ctx.fillStytle = "#ff0000"
ctx.font = "20px ScriptS"
ctx.fillText("40423245",x_g3-30,y_g3)
ctx.stroke()

# 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第3齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g4, y_g4)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g2)*n_g2/n_g3+(math.pi+math.pi/n_g3)*n_g3/n_g4)
# put it back
ctx.translate(-x_g4, -y_g4)
Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, "green")
ctx.restore()

ctx.beginPath()
ctx.fillStytle = "#008000"
ctx.font = "20px ScriptS"
ctx.fillText("40423248",x_g4-30,y_g4)
ctx.stroke()
&lt;/script&gt;

&lt;h3&gt;4. 請依照上述規劃, 在 Onshape 完成相同齒輪組的囓合協同繪圖.&lt;/h3&gt;

&lt;h2&gt;齒輪組連結：&lt;a href="https://cad.onshape.com/documents/998bf3dc53b731d62db8fb27/w/aec61dc14ccd5605bc5b5707/e/48c83701832f463be35a0c66"&gt;齒輪組&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;5. 各組員與組員請同時用 Youtube 與 vimeo, 紀錄上述各階段程式編寫與繪圖配置的 mp4 影片檔案, 標題為"協同產品設計實習第十五週練習"&lt;/h3&gt;

&lt;h3&gt;在網誌完成齒輪組的囓合協同繪圖&lt;/h3&gt;

&lt;iframe src="https://player.vimeo.com/video/220192683" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/220192683"&gt;40423245機械設計工程系 - 協同產品設計實習課程W15練習-在 網誌完成齒輪組的囓合協同繪圖&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;在 Onshape 完成相同齒輪組的囓合協同繪圖&lt;/h3&gt;

&lt;iframe src="https://player.vimeo.com/video/220192358" width="640" height="413" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/220192358"&gt;40423245機械設計工程系 - 協同產品設計實習課程W15練習-在 Onshape 完成相同齒輪組的囓合協同繪圖&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w15"></category></entry><entry><title>2017/05/28 期末行走機構筆記-2</title><link href="./Strandbeest-2.html" rel="alternate"></link><published>2017-05-28T11:00:00+08:00</published><updated>2017-05-28T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-05-28:./Strandbeest-2.html</id><summary type="html">&lt;p&gt;在Onshape中繪製蝸桿蝸輪&lt;/p&gt;


&lt;p&gt;先繪製出蝸桿的草圖&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm sketch1.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著迴轉擠出並繪製出螺旋線，高為24、Pitch為6&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm Helix.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;繪製出蝸桿的齒型&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm sketch2.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;掃略擠出，在桿子的另一邊也是同樣的步驟&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm .png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製蝸輪草圖，擠出22.7並倒角2&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear sketch1.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製迴轉切割草圖，並迴轉切割&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear sketch2.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製出蝸輪的螺旋線，旋轉尺寸為0.25、Pitch為6&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear Helix.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製出蝸輪齒型草圖，並掃掠切割，蝸輪另一邊也是相同步驟&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear sketch3.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著環形陣列44個&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear 陣列.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製出基座&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear bace.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著即可到組合件匯入蝸桿蝸輪，利用轉動結合配合蝸桿蝸輪，然後利用齒輪指令限制其關係後，即可製作動畫&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14-1/onshape worm gear assembly.png" width="480" /&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/219273694" width="640" height="413" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/219273694"&gt;40423245機械設計工程系 - 協同產品設計實習課程W14-在Onshape中繪製蝸桿蝸輪&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category></entry><entry><title>2017/05/24 W14 上課筆記</title><link href="./2017spring-cd-W14.html" rel="alternate"></link><published>2017-05-24T11:00:00+08:00</published><updated>2017-05-24T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-05-24:./2017spring-cd-W14.html</id><summary type="html">&lt;p&gt;利用虛擬主機架設Ubuntu Server 16.04.2&lt;/p&gt;


&lt;p&gt;由於沒有實體電腦，因此選擇虛擬主機來練習&lt;/p&gt;
&lt;p&gt;啟動掛載好Ubuntu Server後，即可啟動虛擬電腦，一開始會選擇語言，選擇『English』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux Language.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;開始安裝，選擇『Install Ubuntu Server』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Install Ununtu Server.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;選擇安裝過程的語言，選擇『English』，接著選『United States』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux United States.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著會偵測鍵盤排列方式，選『No』，接著選擇鍵盤的配置，也都是選擇『English』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux Detect keyborad.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著設定系統的主機名稱&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux Hostname.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著設定使用者完整名稱&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux username.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設定使用者帳號&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux username account.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設定使用者密碼&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux username password.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設置完後系統會問你密碼要設置得如此簡單嗎，選擇『Yes』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux weak password.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;確認時區『Asia / Taipei』是否正確&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux time zone.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;選擇『Guided - use entire disk and set up LVM&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux enyire disk.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;選擇磁碟&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux Select disk.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;是否寫入變更到磁碟，選擇『Yes』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux configure LVM.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設定分割區的空間容量&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux Partition disk.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;確認磁碟配置無誤，選擇『Yes』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux 確認磁碟配置.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設定 HTTP proxy，這裡不填寫&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux HTTP proxy.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;是否自動更新系統，選擇『No automatic updates』&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux no updates.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;是否要安裝其他軟體，選擇『OpenSSH server』;接著安裝 GRUB 開機選單&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux GRUB boot.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著選擇不加密，安裝即完畢，電腦會退出光碟，接著即可登入server&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W14/Linux  finish.png" width="480" /&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/219270004" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/219270004"&gt;40423245機械設計工程系 - 協同產品設計實習課程W14-利用虛擬主機架設Ubuntu Server 16.04.2&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w14"></category></entry><entry><title>2017/05/17 W13 上課筆記</title><link href="./2017spring-cd-W13.html" rel="alternate"></link><published>2017-05-17T11:00:00+08:00</published><updated>2017-05-17T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-05-17:./2017spring-cd-W13.html</id><summary type="html">&lt;p&gt;在Onshape中繪製行走機構所需零件，並組立各個零件&lt;/p&gt;


&lt;p&gt;先在Part Studio中設定好下列參數&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W13/Onshape_Variable.png" width="300" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製各零件草圖並導入參數&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W13/Onshape_Sketch1.png" width="650 " /&gt;&lt;/p&gt;
&lt;p&gt;設定擠出參數為 3，並將零件擠出&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W13/Onshape_Extrude1.png" width="650 " /&gt;&lt;/p&gt;
&lt;p&gt;接著設定軸的半徑參數為 2 並繪製草圖，接著擠出軸，尺寸分別為 厚度X2、厚度X3、厚度X6及厚度X15&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W13/Onshape_shaft_Extrude.png" width="650 " /&gt;&lt;/p&gt;
&lt;p&gt;接著到組合件組立行走機構，利用旋轉指令及圓柱指令結合各個零件，另用銷接指令加入軸&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W13/Onshape_Assembly+shaft.png" width="650 " /&gt;&lt;/p&gt;
&lt;p&gt;製作動畫時只能使兩隻腳同時作動，假如要使四隻腳同時作動，可使用群組指令將兩邊的作動軸設為一個群組&lt;/p&gt;
&lt;h2&gt;零件連結 ：&lt;a href="https://cad.onshape.com/documents/99bea89428b15b1fd764f653/w/9126b8533964a3c22b3305dd/e/adbf4d9ca662915e3c139315"&gt;Strandbeest&lt;/a&gt;&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/218461979" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/218461979"&gt;40423245機械設計工程系 - 協同產品設計實習課程W13-利用Onshape繪製行走機構所需零件&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/218462899" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/218462899"&gt;40423245機械設計工程系 - 協同產品設計實習課程W13-在Onshape上組立行走機構&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/218468376" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/218468376"&gt;40423245機械設計工程系 - 協同產品設計實習課程W13-在Onshape上模擬行走機構動畫&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w13"></category></entry><entry><title>2017/05/10 W12 上課筆記</title><link href="./2017spring-cd-W12.html" rel="alternate"></link><published>2017-05-10T11:00:00+08:00</published><updated>2017-05-10T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-05-10:./2017spring-cd-W12.html</id><summary type="html">&lt;p&gt;在Onshape上繪製漸開線齒輪以及利用參數繪製齒輪&lt;/p&gt;


&lt;p&gt;給定模數、齒數及壓力角後，繪製出節圓、齒頂圓、齒根圓及基圓&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W12/image W12/onshape_round.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著從基圓上拉出漸開線，接著繪製到齒根的垂直線，並對稱草圖，即可擠出齒型&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W12/image W12/onshape_spur.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著即可加入參數繪製齒輪，可到老師網誌參考程式碼，亦可搜尋spur的FeatureScript &lt;/p&gt;
&lt;p&gt;以下為對應的 FeatureScript 正齒輪輪廓繪圖程式碼:
&lt;pre class="brush: python"&gt;
FeatureScript 581;
import(path : "onshape/std/geometry.fs", version : "581.0");&lt;/p&gt;
&lt;p&gt;annotation { "Feature Type Name" : "Spur2" }
export const spur = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        // 正齒輪齒數, 由使用者輸入, 型別為整數
        annotation { "Name" : "Number of Gear Tooth" }
        isInteger(definition.n, POSITIVE_COUNT_BOUNDS);
        // 正齒輪模數, 由使用者輸入, 型別為長度, 為內建尺寸單位
        annotation { "Name" : "Module" }
        isLength(definition.module, LENGTH_BOUNDS);
        // 正齒輪壓力角, 由使用者輸入, 型別為角度, 為內建角度單位
        annotation { "Name" : "Pressure Angle" }
        isAngle(definition.pa, ANGLE_360_BOUNDS);
        // 正齒輪圓心座標點, 由使用者選擇
        annotation { "Name" : "Select a point", "Filter" : EntityType.VERTEX, "MaxNumberOfPicks" : 1 }
        definition.point is Query;
    }
    {
        // Precondition 中的查詢, 需要 evalue 才能傳回對應的 entity
        var location = evaluateQuery(context, definition.point)[0];
        // location 變數為點座標對應的 entity, 必須透過 evVetexPoint 的評量才能傳回對應的點座標
        var center3D = evVertexPoint(context, {
                "vertex" : location
        });&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    // 作圖平面利用 evOwnerSketch 評量, 與 location entity 同一個平面
    var sketchPlane = evOwnerSketchPlane(context, {
            &amp;quot;entity&amp;quot; : location
    });
    // 作圖畫
    const gearSketch = newSketchOnPlane(context, id + &amp;quot;gearSketch&amp;quot;, {
            &amp;quot;sketchPlane&amp;quot; : sketchPlane
    });
    // 利用 worldToPlane, 將 center3D 轉換為 sketchPlane 上的平面點座標
    const center2D = worldToPlane(sketchPlane, center3D);
    //print(center2D);
    // 漸開線近似點數
    var imax = 5;
    // 使用者所選的齒輪圓心 x 座標
    var midx = center2D[0];
    // 使用者所選的齒輪圓心 y 座標
    var midy = center2D[1];
    // 齒數
    var n = definition.n;
    // 模數
    var m = definition.module;
    // 壓力角, 單位為角度
    var pa = definition.pa;
    // 齒輪的節圓半徑
    var rp = m*n/2;
    skLineSegment(gearSketch, &amp;quot;line&amp;quot;, {
    &amp;quot;start&amp;quot; : vector(midx,midy),
    &amp;quot;end&amp;quot; : vector(midx,midy+rp)
    });
    // 齒根
    var d = 2.5*rp/n;
    // 齒頂圓半徑
    var ra = rp + m;
    // 基圓半徑
    var rb = rp*cos(pa);
    //print(rb);
    // 齒根圓半徑
    var rd = rp - d;
    // 分段後齒頂與齒根半徑差增量
    var dr = 0*meter;
    // 若 rb &amp;gt; rd 時從基圓開始繪製漸開線, 但是若 rd &amp;gt; rb, 則漸開線從 rd 畫到齒頂圓
    if (rd &amp;gt; rb)
    {
        // 半徑差的分段, 由齒根圓到齒頂圓
        dr = (ra-rd)/imax;
    }
    else
    {
        // 半徑差的分段, 由基圓到齒頂圓
        dr = (ra-rb)/imax;
    }
    // PI 為實數值沒有單位, tan(pa)也沒有單位, pa 已經設定單位為 degree, 這裡為了與 radian 運算
    // 系統會自動轉為 radian
    var rot = PI/(2*n)*radian;
    //print(sigma);
    // 分別用來設定 entity id 用的增量變數
    var nameId = 1;
    var nameId2 = 1;
    var r = 0*meter;
    // theta 為浮點數字
    var theta = 0;
    var inv = 0*radian;
    var inc = 0*radian;
    // 當 r=rp 時 ,計算 inv_rp 用來旋轉漸開線用
    // theta 為沒有單位的實數
    theta = sqrt((rp*rp)/(rb*rb)-1);
    // atan(theta) 為 radian
    var inv_rp = theta*radian-atan(theta);
    // 漸開線上點的 x 座標
    var xpt = 0*meter;
    // 漸開線上點的 y 座標
    var ypt = 0*meter;
    // 左側漸開線第1點座標 left first x and y
    var lfx = 0*meter;
    var lfy = 0*meter;
    // 右側漸開線第1點座標 right first x and y
    var rfx = 0*meter;
    var rfy = 0*meter;
    // 左側齒根圓上點座標 left x of dedendum point
    var lxd = 0*meter;
    var lyd = 0*meter;
    // 右側齒根圓上點座標 right x of dedendum point
    var rxd = 0*meter;
    var ryd = 0*meter;
    // 左側齒根圓上點座標 right x of dedendum point (advanced)
    var lxd_ad = 0*meter;
    var lyd_ad = 0*meter;
    var inc_ad = 0*radian;
    for (var j=0;j&amp;lt;n;j+=1)
    {
        // 當 j 增量時, 按照齒數輪廓繞行旋轉增量角度
        inc = (2.*j*PI/n)*radian;
        inc_ad = (2.*(j+1)*PI/n)*radian;
        if (rd&amp;gt;rb)
        {
            // 當齒根半徑因為齒數增多後大於基圓半徑時, 漸開線從齒根圓長起
            theta = sqrt((rd*rd)/(rb*rb)-1.);
            inv = theta*radian-atan(theta);
            // 左側漸開線第1點座標
            // 左側輪廓線配合逆時針旋轉 inc 角度
            lfx = midx+rd*sin(inv-rot-inv_rp+inc);
            lfy = midy+rd*cos(inv-rot-inv_rp+inc);
            lxd = lfx;
            lyd = lfy;
            lxd_ad = midx+rd*sin(inv-rot-inv_rp+inc_ad);
            lyd_ad = midy+rd*cos(inv-rot-inv_rp+inc_ad);
            // 右側漸開線第1點座標
            // 右側輪廓線配合順時針旋轉 inc 角度
            rfx = midx-rd*sin(inv-rot-inv_rp-inc);
            rfy = midy+rd*cos(inv-rot-inv_rp-inc);
            rxd = rfx;
            ryd = rfy;
            // 齒根圓上的直線 on dedendum points
            skLineSegment(gearSketch, &amp;quot;line_dd&amp;quot; ~ nameId, {
            &amp;quot;start&amp;quot; : vector(rxd,ryd),
            &amp;quot;end&amp;quot; : vector((lxd_ad),(lyd_ad))
            });
        }
        else
        {
            // 當基圓半徑大於齒根圓時, 漸開線從基圓長起
            theta = sqrt((rb*rb)/(rb*rb)-1.);
            inv = theta*radian-atan(theta);
            // 左側漸開線第1點座標
            lfx = midx+rb*sin(inv-rot-inv_rp+inc);
            lfy = midy+rb*cos(inv-rot-inv_rp+inc);
            lxd = midx+rd*sin(inv-rot-inv_rp+inc);
            lyd = midy+rd*cos(inv-rot-inv_rp+inc);
            lxd_ad = midx+rd*sin(inv-rot-inv_rp+inc_ad);
            lyd_ad = midy+rd*cos(inv-rot-inv_rp+inc_ad);
            // 從基圓點到齒根圓點, 畫直線 left from base point to dedendum point
            skLineSegment(gearSketch, &amp;quot;line_lbd&amp;quot; ~ nameId, {
            &amp;quot;start&amp;quot; : vector(lfx,lfy),
            &amp;quot;end&amp;quot; : vector((lxd),(lyd))
            });
            // 右側漸開線第1點座標
            rfx = midx-rb*sin(inv-rot-inv_rp-inc);
            rfy = midy+rb*cos(inv-rot-inv_rp-inc);
            rxd = midx-rd*sin(inv-rot-inv_rp-inc);
            ryd = midy+rd*cos(inv-rot-inv_rp-inc);
            // 從基圓點到齒根圓點, 畫直線 right from base point to dedendum point
            skLineSegment(gearSketch, &amp;quot;line_rbd&amp;quot; ~ nameId, {
            &amp;quot;start&amp;quot; : vector(rfx,rfy),
            &amp;quot;end&amp;quot; : vector((rxd),(ryd))
            });
            // 齒根圓上的直線 on dedendum points
            skLineSegment(gearSketch, &amp;quot;line_dd&amp;quot; ~ nameId, {
            &amp;quot;start&amp;quot; : vector(rxd,ryd),
            &amp;quot;end&amp;quot; : vector((lxd_ad),(lyd_ad))
            });
        }

        for (var i=1; i&amp;lt;imax+1; i+= 1)
        {
            // 先處理中線左側的漸開線
            // 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
            if (rd&amp;gt;rb)
            {
                r = rd+i*dr;
            }
            else
            {
                r = rb+i*dr;
            }
            theta = sqrt((r*r)/(rb*rb)-1);
            var inv = theta*radian-atan(theta);
            // 漸開線上的點座標
            xpt = midx+r*sin(inv-rot-inv_rp+inc);
            ypt = midy+r*cos(inv-rot-inv_rp+inc);
            // lxd, lyd 為漸開線上的繪線起點座標
            skLineSegment(gearSketch, &amp;quot;lineb&amp;quot; ~ nameId, {
            &amp;quot;start&amp;quot; : vector(lfx,lfy),
            &amp;quot;end&amp;quot; : vector((xpt),(ypt))
            });
            // 更新漸開線點座標
            lfx = xpt;
            lfy = ypt;
            nameId += 1;
        }
        // 紀錄左側漸開線的最後一點, 也就是齒頂圓上的點座標
        var lastlx = xpt;
        var lastly = ypt;
        // another side
        for (var i=1; i&amp;lt;imax+1; i+= 1)
        {
            if (rd&amp;gt;rb)
            {
                r = rd+i*dr;
            }
            else
            {
                r = rb+i*dr;
            }
            theta = sqrt((r*r)/(rb*rb)-1);
            var inv = theta*radian-atan(theta);
            // 漸開線上的點座標
            xpt = midx-r*sin(inv-rot-inv_rp-inc);
            ypt = midy+r*cos(inv-rot-inv_rp-inc);
            // rxd, ryd 為漸開線上的繪線起點座標
            skLineSegment(gearSketch, &amp;quot;linec&amp;quot; ~ nameId, {
            &amp;quot;start&amp;quot; : vector(rfx,rfy),
            &amp;quot;end&amp;quot; : vector((xpt),(ypt))
            });
            // 更新漸開線點座標
            rfx = xpt;
            rfy = ypt;
            nameId += 1;
        }
        var lastrx = xpt;
        var lastry = ypt;
        // 齒頂連線
        skLineSegment(gearSketch, &amp;quot;lined&amp;quot; ~ nameId2, {
        &amp;quot;start&amp;quot; : vector(lastlx,lastly),
        &amp;quot;end&amp;quot; : vector(lastrx,lastry)
        });
        nameId2 += 1;
    }
skSolve(gearSketch);
});
&lt;/pre&gt;&lt;/div&gt;


&lt;/pre&gt;

&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;1.當齒根半徑因為齒數增多後大於基圓半徑時, 漸開線從齒根圓長起&lt;/p&gt;
&lt;p&gt;2.當基圓半徑大於齒根圓時, 漸開線從基圓長起&lt;/p&gt;
&lt;h2&gt;零件連結 ：&lt;a href="https://cad.onshape.com/documents/995d603fbed679063ef62b5a/w/e38051a643b25cd5bddc6c02/e/488a3f30ff23c217bcae1a0e"&gt;Onshape齒輪&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;練習影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/218259602" width="640" height="413" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/218259602"&gt;40423245機械設計工程系 - 協同產品設計實習課程W12-在Onshape上繪製漸開線齒輪&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/218260068" width="640" height="413" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/218260068"&gt;40423245機械設計工程系 - 協同產品設計實習課程W12-利用參數繪製齒輪&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cadlab.mde.tw/post/onshape-featurescript-spur-gear-lun-kuo-hui-tu.html"&gt;Onshape Featurescript Spur Gear 輪廓繪圖&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.arc.id.au/GearDrawing.html"&gt;Gear Drawing with Bézier Curves&lt;/a&gt;&lt;/p&gt;</summary><category term="notes"></category><category term="w12"></category></entry><entry><title>2017/05/03 W11 上課筆記</title><link href="./2017spring-cd-W11.html" rel="alternate"></link><published>2017-05-03T11:00:00+08:00</published><updated>2017-05-03T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-05-03:./2017spring-cd-W11.html</id><summary type="html">&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;h3&gt;單一正齒輪程式碼&lt;/h3&gt;

&lt;pre class="brush: python"&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;
&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;
&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;
&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;
&lt;/pre&gt;

&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;1.當齒根半徑因為齒數增多後大於基圓半徑時, 漸開線從齒根圓長起&lt;/p&gt;
&lt;p&gt;2.當基圓半徑大於齒根圓時, 漸開線從基圓長起&lt;/p&gt;
&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
&lt;/script&gt;

&lt;p&gt;設法處理兩種正齒輪嚙合的協同繪圖 (17t-11t-13t):&lt;/p&gt;
&lt;canvas id='gear3' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 17
# 第2齒輪齒數
n_g2 = 11
# 第3齒輪齒數
n_g3 = 13
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.2+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "blue")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "black")
ctx.restore()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "red")
ctx.restore()
&lt;/script&gt;

&lt;h3&gt;齒輪程式碼&lt;/h3&gt;

&lt;pre class="brush: python"&gt;
&lt;canvas id='gear3' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 17
# 第2齒輪齒數
n_g2 = 11
# 第3齒輪齒數
n_g3 = 13
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.2+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "blue")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "black")
ctx.restore()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "red")
ctx.restore()
&lt;/script&gt;
&lt;/pre&gt;

&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;1.第1齒輪順時鐘轉 90 度&lt;/p&gt;
&lt;p&gt;2.將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合&lt;/p&gt;
&lt;p&gt;3.將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合&lt;/p&gt;</summary><category term="notes"></category><category term="w11"></category></entry><entry><title>2017/04/26 W10 上課筆記</title><link href="./2017spring-cd-W10.html" rel="alternate"></link><published>2017-04-26T11:00:00+08:00</published><updated>2017-04-26T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-04-26:./2017spring-cd-W10.html</id><summary type="html">&lt;p&gt;將期中考週繪製的四連桿匯入V-rep 模擬&lt;/p&gt;


&lt;p&gt;1.先將Onshape所繪製好的零件匯出成stl檔，接著匯入V-rap裡，並將各零件分解開來。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W10/Image W10/V-rep Divide shape.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;2.接著加入旋轉軸，與定位軸的位置重合，並將定位軸隱藏。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W10/Image W10/V-rep add Revolute .png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;3.最後只要移好各零件與旋轉軸相對位置，即可加入馬達，將各零件實體化，就可以開始模擬了。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W10/Image W10/V-rep Dummy.png" width="480" /&gt;&lt;/p&gt;
&lt;h3&gt;影片&lt;/h3&gt;
&lt;iframe src="https://player.vimeo.com/video/214997443" width="640" height="450" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214997443"&gt;40423245機械設計工程系 - 協同產品設計實習課程W10-將期中考所繪製的Fourbar Walker匯入V-rep並使其作動&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w10"></category></entry><entry><title>2017/04/20 解決Leo編輯器的問題</title><link href="./solve%20Leo%20editor%20problem.html" rel="alternate"></link><published>2017-04-20T11:00:00+08:00</published><updated>2017-04-20T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-04-20:./solve Leo editor problem.html</id><summary type="html">&lt;p&gt;解決在按下 start 之後會出現 cp950 及 Leo editor 無法開啟的問題&lt;/p&gt;


&lt;h3&gt;1.事發問題&lt;/h3&gt;
&lt;p&gt;由於利用 start 無法將 Leo 開啟，因此利用 SciTE 開啟 Leo，但出現 cp950 的畫面。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W10/Image W10/SciTE cp950.png" width="600" /&gt;&lt;/p&gt;
&lt;p&gt;這是因為程式在讀取Leo時，讀取到了中文字，因此出現編碼問題。&lt;/p&gt;
&lt;h3&gt;2.事發原因&lt;/h3&gt;
&lt;p&gt;為了複製、保存檔案、對照檔案...時，將clone下來的倉儲複製到具有中文字檔名的資料夾裡，這樣在讀取此資料夾裡的Leo檔案時，即會發生編碼問題。&lt;/p&gt;
&lt;h3&gt;3.解決辦法&lt;/h3&gt;
&lt;p&gt;因為是在讀取位於data\home.leo.leoRecentFiles.txt的檔案時發生問題&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W10/Image W10/leoRecentFiles.png"width="600" /&gt;&lt;/p&gt;
&lt;p&gt;因此只要編輯此檔案並將具有中文字的那行刪掉即可，跟自己的倉儲資料無關&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W10/Image W10/del 新增資料夾.png"width="600" /&gt;&lt;/p&gt;
&lt;h3&gt;4.心得&lt;/h3&gt;
&lt;p&gt;要在電腦上使用中文字是一件麻煩又困難的事情，而且容易發生問題，因此學好英文是一件必要的事情。&lt;/p&gt;
&lt;h3&gt;5.操作影片&lt;/h3&gt;
&lt;iframe src="https://player.vimeo.com/video/214848236" width="640" height="448" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/214848236"&gt;40423245機械設計工程系 - 協同產品設計實習課程W10-解決關於Leo顯示的cp950問題&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category></entry><entry><title>2017/04/19 W9</title><link href="./2017spring-cd-W9.html" rel="alternate"></link><published>2017-04-19T11:00:00+08:00</published><updated>2017-04-19T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-04-19:./2017spring-cd-W9.html</id><summary type="html">&lt;h2&gt;期中協同查驗與自評&lt;/h2&gt;


&lt;h2&gt;(二) 四連桿機構協同 Trace Point 查驗&lt;/h2&gt;
&lt;p&gt;(1)利用solvespace進行點路徑的分析&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W9/fourbar solvespace.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;(2)用Excel進行點的分析&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W9/fourbar Excel.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;(3)利用程式繪製路徑&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;canvas id="fourbar" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
# 準備繪圖畫布
canvas = doc["fourbar"]
container1 = doc['container1']
ctx = canvas.getContext("2d")

fourbar_data = open("./../data/image W9/fourbar 40.csv").read()
fourbar_list = fourbar_data.splitlines()
#container1 &lt;= fourbar_list[0]
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 配合圖形位置進行座標轉換
ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100)
# 畫出 x 與 y 座標線
# 各座標值放大 3 倍
ratio = 3
ctx.moveTo(0, 0)
ctx.lineTo(-30*ratio, 0)
start_point = fourbar_list[0].split(",")
ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio)
count = 0
for data in fourbar_list[1:]:
    point = data.split(",")
    #count = count + 1
    #container1 &lt;= str(count) + ":" + point[0] + "," + point[1]
    #container1 &lt;= html.BR()
    ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;p&gt;(4)練習影片&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/213775242" width="640" height="347" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/213775242"&gt;40423245機械設計工程系 - 協同產品設計實習課程W9-fourbar link 40 點分析&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;(三) Fourbar Walker OnShape 零件協同繪圖與組立查驗&lt;/h2&gt;
&lt;p&gt;(1)練習影片&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/213780670" width="640" height="347" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/213780670"&gt;40423245機械設計工程系 - 協同產品設計實習課程W9-(三) Fourbar Walker OnShape 零件協同繪圖與組立查驗&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w9"></category></entry><entry><title>2017/04/18 W9</title><link href="./2017spring-cd-W8.5.html" rel="alternate"></link><published>2017-04-18T11:00:00+08:00</published><updated>2017-04-18T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-04-18:./2017spring-cd-W8.5.html</id><summary type="html">&lt;h2&gt;一至八週報告整合&lt;/h2&gt;


&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W1.html"&gt;第一週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;一.&lt;/span&gt;可至&lt;a href="http://mde.tw/2017springcd/blog/2017spring-cd.html"&gt;2017 Spring 協同產品設計實習&lt;/a&gt;觀看這學期的課程大綱，&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;二.&lt;/span&gt;了解如何使用stunnel&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W2.html"&gt;第二週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;一.&lt;/span&gt;利用python找出缺課人員&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;二.&lt;/span&gt;在solvespace組立四連桿，並放置到Vrep裡。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W3.html"&gt;第三週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;
建置fossil&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt; 請完成 Solvespace 30-50-60 cm 比例的四連桿組立, 並轉出 stl 檔案, 以 import 方式轉入 V-rep&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt; 請利用 Onshape 完成上述相同尺寸之四連桿機構, 以 stl 轉出 (或其他格式) 後, 再轉入 V-rep&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;4.&lt;/span&gt;請在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;5.&lt;/span&gt; 請設法驗證上述四連桿運動軌跡, 是否正確, 並設法在分組網頁中執行該四連桿機構的運動模擬&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W4.html"&gt;第四週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;Fossil新增組員以及組員權限設定&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;在Onshape繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;在solvespace繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W5.html"&gt;第五週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;如何在fossil筆記倉儲主頁顯示作業&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;將單連桿轉入V-rep並使其作動&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W6.html"&gt;第六週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;利用Onshape裡的變數指令來繪製四連桿，並匯入V-rep裝上馬達。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W7.html"&gt;第七週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;利用fossil對倉儲進行管理練習&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;利用Onshape繪製八連桿&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;將八連桿匯入V-rep並使其作動&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://40423245.github.io/2017springcd_hw/blog/2017spring-cd-W8.html"&gt;第八週連結&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;自評&lt;/p&gt;
&lt;h2&gt;總結：&lt;/h2&gt;
&lt;p&gt;這學期導入了fossil來跟git 一起管理倉儲，這樣在以後假如git沒支援了，還可以用fossil；這學期也加入了V-rep，可以結合上學期的Onshape以及solvespace，繪製機構以及模擬，練習的範例有單連桿、四連桿及八連桿。&lt;/p&gt;
&lt;h2&gt;心得及自評&lt;/h2&gt;
&lt;p&gt;每一週都有跟上進度，也都有進行練習以及拍影片，但在於組員的協同上還需要改進，自評75分。&lt;/p&gt;
&lt;h2&gt;影片&lt;/h2&gt;
&lt;p&gt;第一週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/205656178')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;W1&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;第二週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/206845385')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;python找出缺課人員&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/207629426')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;Solvespace四連桿組立&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/207626453')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;Onshape四連桿&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/207920094')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;任務四、任務五&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;第三週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/208311391')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;建置Fossil SCM&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208973584')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;Fossil權限設定&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208973817')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Onshape單連桿&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208973989')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; solvespace單連桿&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208974147')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Vrep單連桿&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;第四週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/208973584')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Fossil新增組員&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208973817')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Onshape單連桿機構&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208973989')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; solvespace單連桿機構&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/208974147')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;回家練習
&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;第五週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/210093581')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;W5上課練習
&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/210037771')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;W5回家練習
&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;第六週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/211471124')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;W6上課練習
&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;第七週&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/212450094')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;fossil倉儲管理
&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/212448923')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;Onshape八連桿
&lt;/button&gt; 
&lt;button onClick="lity('https://vimeo.com/212447799')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;八連桿V-rep
&lt;/button&gt; &lt;/p&gt;</summary><category term="notes"></category><category term="w9"></category></entry><entry><title>2017/04/12 W8</title><link href="./2017spring-cd-W8.html" rel="alternate"></link><published>2017-04-12T11:00:00+08:00</published><updated>2017-04-12T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-04-12:./2017spring-cd-W8.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第八週&lt;/h2&gt;
&lt;p&gt;自評
&lt;/p&gt;
&lt;p&gt;小組互評: &lt;a href="https://pygroup-ag100.rhcloud.com"&gt;https://pygroup-ag100.rhcloud.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;個人自評: &lt;a href="http://mde1a2.kmol.info:8000/k96tgzh1ofbl"&gt;http://mde1a2.kmol.info:8000/k96tgzh1ofbl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;只要在 google上搜尋 site:edu.tw hyperworks 即可以找到放置在結尾為 edu.tw 裡有 hyperworks 的資料&lt;/p&gt;</summary><category term="notes"></category><category term="w8"></category></entry><entry><title>2017/04/05 W7</title><link href="./2017spring-cd-W7.html" rel="alternate"></link><published>2017-04-05T11:00:00+08:00</published><updated>2017-04-05T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-04-05:./2017spring-cd-W7.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第七週&lt;/h2&gt;
&lt;p&gt;一.利用fossil對倉儲進行管理練習&lt;/p&gt;
&lt;p&gt;二.利用Onshape繪製八連桿&lt;/p&gt;
&lt;p&gt;三.將八連桿匯入V-rep並使其作動&lt;/p&gt;


&lt;h2&gt;上課筆記&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;利用fossil對倉儲進行管理練習&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;利用Onshape繪製八連桿&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;將八連桿匯入V-rep並使其作動&lt;/p&gt;
&lt;h2&gt;練習&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;利用fossil對倉儲進行管理練習&lt;/p&gt;
&lt;p&gt;利用以下指令對fossil倉儲進行管理&lt;/p&gt;
&lt;p&gt;fossil clone uri foo.fossil (將遠端的倉儲下載下來)&lt;/p&gt;
&lt;p&gt;fossil open ./../../foo.fossil (將下載下來的倉儲打開)&lt;/p&gt;
&lt;p&gt;fossil add . (將改版的倉儲推至暫存區)&lt;/p&gt;
&lt;p&gt;fossil remote-url off (將自動推送改為手動，這是與git不同之處，fossil會自動推送)&lt;/p&gt;
&lt;p&gt;fossil push https://user@192.168.X.XX  (將暫存區的檔案推至遠端)&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;利用Onshape繪製八連桿&lt;/p&gt;
&lt;p&gt;與四連桿相同利用參數指令繪製零件，並利用轉動指令及緊固指令將八連桿組立起來&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W7/Onshape 8link ass.png" width="480" /&gt;&lt;/p&gt;
&lt;h2&gt;零件連結 ：&lt;a href="https://cad.onshape.com/documents/8f27e94d797527621c7de57f/w/348f7b820c41f1e00e927d58/e/ac94e18b0e62ac367e76fc53"&gt;Onshape八連桿機構&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;將八連桿匯入V-rep並使其作動&lt;/p&gt;
&lt;p&gt;與四連桿相同，只不過這次加入了更多的Dummy，因此在其從屬關係上須特別小心。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W7/V-rep 8 link relationship .png" width="480" /&gt;&lt;/p&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;這禮拜加入更多的Dummy，以及在桿子上的從屬關係更加的複雜，讓我在練習上有些手無足措，也花了滿久的時間，這禮拜還加入了fossil的倉儲管理，fossil對我來說還相當新鮮，需要盡快地了解其架構。&lt;/p&gt;
&lt;h2&gt;影片&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;利用fossil對倉儲進行管理練習&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/212450094" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/212450094"&gt;40423245機械設計工程系 - 協同產品設計實習課程W7-利用fossil對倉儲進行管理練習&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;利用Onshape繪製八連桿&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/212448923" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/212448923"&gt;40423245機械設計工程系 - 協同產品設計實習課程W7-利用Onshape繪製八連桿&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;將八連桿匯入V-rep並使其作動&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/212447799" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/212447799"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W7-將八連桿匯入V-rep並使其作動&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w7"></category></entry><entry><title>2017/03/29 W6</title><link href="./2017spring-cd-W6.html" rel="alternate"></link><published>2017-03-29T11:00:00+08:00</published><updated>2017-03-29T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-03-29:./2017spring-cd-W6.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第六週&lt;/h2&gt;
&lt;p&gt;一.利用Onshape裡的變數指令來繪製四連桿，並匯入V-rep裝上馬達&lt;/p&gt;


&lt;h2&gt;上課筆記&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;利用Onshape裡的變數指令來繪製四連桿，並匯入V-rep裝上馬達。&lt;/p&gt;
&lt;h2&gt;練習&lt;/h2&gt;
&lt;p&gt;在Onshape裡建立一個新文件，並設定好參數設定&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W6/Onshape Variable.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著繪製草圖，在標註尺寸時利用#+參數名稱加入設定好的參數，並將其擠出為零件&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W6/Onshape link and joint.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著在組合件裡匯入零件，並利用&lt;img src="./../data/image W6/Onshape 轉動.png" width="40" /&gt;指令組立桿子，利用&lt;img src="./../data/image W6/Onshape 緊固.png" width="40" /&gt;指令組立軸&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W6/Onshape ass.png" width="480" /&gt;&lt;/p&gt;
&lt;h2&gt;零件連結 ：&lt;a href="https://cad.onshape.com/documents/2a72700429928831c3ee6f49/w/f729c21a318454e00a730da2/e/6abaf474022c06b4d4cb8063"&gt;Onshape四連桿機構&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接著將組立好的四連桿轉出stl，並匯入V-rep，將各個零件分開，加入旋轉軸，加入馬達，將桿子設為動態物件後，設好從屬關係。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W6/V-rep 從屬關係.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著新增兩個Dummy&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W6/V-rep add dummy.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;並設定兩個Dummy的關係Dynamics&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W6/V-rep dummy opition.png" width="480" /&gt;&lt;/p&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;這禮拜加入了Dummy的工具，還不太熟悉需要好好的研究一下。&lt;/p&gt;
&lt;h2&gt;練習影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/211471124" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211471124"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W6上課練習&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w6"></category></entry><entry><title>2017/03/22 W5</title><link href="./2017spring-cd-W5.html" rel="alternate"></link><published>2017-03-22T11:00:00+08:00</published><updated>2017-03-22T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-03-22:./2017spring-cd-W5.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第五週&lt;/h2&gt;
&lt;p&gt;一.如何在fossil筆記倉儲主頁顯示作業&lt;/p&gt;
&lt;p&gt;二.將單連桿轉入V-rep並使其作動&lt;/p&gt;


&lt;h2&gt;上課筆記&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;如何在fossil筆記倉儲主頁顯示作業&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #46A3FF"&gt;2.&lt;/span&gt;將單連桿轉入V-rep並使其作動&lt;/p&gt;
&lt;h2&gt;練習&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;如何在fossil筆記倉儲主頁顯示作業&lt;/p&gt;
&lt;p&gt;只要在wiki裡新增一個與倉儲筆記同名稱的檔案，即可在fossil筆記倉儲主頁顯示作業&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/fossil_home.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;在建立wiki有三種格式可選擇，wiki、Markdown及html，安全性以wiki最高，Markdown其次，html最低&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/fossil_wiki.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #46A3FF"&gt;2.&lt;/span&gt;將單連桿轉入V-rep並使其作動
先將在繪圖軟體繪製好的單連桿利用Import/Mesh匯入V-rep&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep import.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著利用Divide selected shapes將單連桿的零件分開&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep Divide shapes.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;利用Add/Joint/Revolute新增一個旋轉軸&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep onelink Revolute.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;將旋轉軸的位置跟繪製的軸合併再一起&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep onelink Item position.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設置好各零件的從屬關係&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep onelink ass.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著設定旋轉軸的角速度，並固定單連桿&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep onelink Joint Dynamic.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;接著將桿子設為動態物件&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep onelink body Dynamic.png" width="480" /&gt;&lt;/p&gt;
&lt;h2&gt;練習心得&lt;/h2&gt;
&lt;p&gt;發現V-rep是個非常強大的軟體，可以模擬真實的情況，單連桿是較為簡單的練習，因此很快就了解了狀況。&lt;/p&gt;
&lt;h2&gt;練習影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/210093581" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/210093581"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W5上課練習&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;回家練習&lt;/h2&gt;
&lt;p&gt;跟單連桿一樣先將檔案轉入V-rep，接著將零件分開，之後加入一個旋轉軸，將旋轉軸的位置跟繪製的軸合併再一起&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep Item position.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;四個旋轉軸都設定好了之後，設定好各零件的從屬關係&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep ass.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;加入兩個Dummy，一個放置在最後一個旋轉軸，另一個放置在第一桿子下&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep Dummy.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;設定好兩者的關係&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W5/V-rep Scene Object.png" width="480" /&gt;&lt;/p&gt;
&lt;h2&gt;回家練習心得&lt;/h2&gt;
&lt;p&gt;四連桿相較於單連趕多了個Dummy，在它的使用上花費了不少時間。&lt;/p&gt;
&lt;h2&gt;回家練習影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/210037771" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/210037771"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W5回家練習&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w5"></category></entry><entry><title>2017/03/15 W4</title><link href="./2017spring-cd-W4.html" rel="alternate"></link><published>2017-03-15T11:00:00+08:00</published><updated>2017-03-15T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-03-15:./2017spring-cd-W4.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第四週&lt;/h2&gt;
&lt;p&gt;一.Fossil新增組員以及組員權限設定&lt;/p&gt;
&lt;p&gt;二.在Onshape繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;三.在solvespace繪製單連桿機構並轉出stl檔案&lt;/p&gt;


&lt;h2&gt;上課筆記&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;Fossil新增組員以及組員權限設定&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;在Onshape繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;在solvespace繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;h2&gt;練習&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;Fossil新增組員以及組員權限設定&lt;/p&gt;
&lt;p&gt;fossil開啟後 ，到admin/user/add裡可新增筆記倉儲裡的成員&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W4/fossil add user.png" width="480" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;在Onshape繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;繪製出所需零件 ，底座、軸及單連桿，並將其組立起來&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cad.onshape.com/documents/414f3a744b87a17b4d845380/w/576a159abfb695fa37f8e121/e/e6da162a4b20484587e269d6"&gt;Onshape單連桿機構&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;在solvespace繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;繪製出所需零件 ，底座、軸及單連桿，並將其組立起來&lt;/p&gt;
&lt;iframe src="./../data/shapes W4/ass.html" width="640" height="420"&gt;&lt;/iframe&gt;

&lt;h2&gt;練習心得&lt;/h2&gt;
&lt;p&gt;這禮拜所繪製的單連桿零件還蠻簡單的。&lt;/p&gt;
&lt;h2&gt;練習影片&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;Fossil新增組員以及組員權限設定&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/208973584')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Fossil新增組員&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt;在Onshape繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/208973817')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Onshape單連桿機構&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt;在solvespace繪製單連桿機構並轉出stl檔案&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/208973989')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; solvespace單連桿機構&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;4.&lt;/span&gt;回家練習&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://vimeo.com/208974147')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt;回家練習
&lt;/button&gt; &lt;/p&gt;</summary><category term="notes"></category><category term="w4"></category></entry><entry><title>2017/03/08 W3</title><link href="./2017spring-cd-W3.html" rel="alternate"></link><published>2017-03-08T11:00:00+08:00</published><updated>2017-03-08T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-03-08:./2017spring-cd-W3.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第三週&lt;/h2&gt;
&lt;p&gt;一. 建置fossil&lt;/p&gt;
&lt;p&gt;二. 請完成 Solvespace 30-50-60 cm 比例的四連桿組立, 並轉出 stl 檔案, 以 import 方式轉入 V-rep&lt;/p&gt;
&lt;p&gt;三. 請利用 Onshape 完成上述相同尺寸之四連桿機構, 以 stl 轉出 (或其他格式) 後, 再轉入 V-rep&lt;/p&gt;
&lt;p&gt;四.請在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡&lt;/p&gt;
&lt;p&gt;五. 請設法驗證上述四連桿運動軌跡, 是否正確, 並設法在分組網頁中執行該四連桿機構的運動模擬&lt;/p&gt;


&lt;h2&gt;第三週上課內容&lt;/h2&gt;
&lt;p&gt;從 https://mde2al.kmol.info 進入wiki檢視每周進度，並介紹了hyperworks這套軟體，包括檢測受力.受熱.流力.最小化資源利用‧‧‧，還給我們十則影片翻譯，以便了解hyperworks以及增進英文能力。&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;
建置fossil，在cmd裡進入Y\tmp\fossil_repo的資料夾，輸入fossil init &lt;span style="background-color: #46A3FF"&gt;foo&lt;/span&gt;.fossil的指令(&lt;span style="background-color: #46A3FF"&gt;foo&lt;/span&gt;的位置可輸入組別名稱)，第三行有帳戶名稱與密碼需特別注意。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/fossil init.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;可至admin/user裡更改帳戶名稱及密碼&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/fossl password.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;可至admin/configuration裡更改標題&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/fossil configuration.png" width="560" /&gt;&lt;/p&gt;
&lt;h2&gt;第三週任務&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;1.&lt;/span&gt;請至課程網頁中 w3 Hyperworks 處瀏覽 10 個影片, 請每組選兩個影片, 設法寫出該影片的英文逐字稿, 目的是希望能夠最佳化行走機構的零件&lt;/p&gt;
&lt;p&gt;&lt;button onClick="lity('https://player.vimeo.com/video/207229473')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks1&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207229488')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks2&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207229503')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks3&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207229515')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks4&lt;/button&gt;&lt;button onClick="lity('https://player.vimeo.com/video/207239262')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks 14-1&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207239448')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks 14-2&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207239288')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks 14-3&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207239276')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks 14-4&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207239300')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks 14-5&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/207240382')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; Hyperworks 14-6&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;2.&lt;/span&gt; 請完成 Solvespace 30-50-60 cm 比例的四連桿組立, 並轉出 stl 檔案, 以 import 方式轉入 V-rep&lt;/p&gt;
&lt;p&gt;先在solvespace裡繪製出四連桿結構&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W2/fourbar Architecture.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;再將桿子組立起來(利用點與點的重合、線的共線及點與面的重合，限制桿子的作動。)&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W2/fourbar combination.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;最後將四連桿儲存成stl檔`並用Vrep裡的import裡的Mash開啟(開啟時四連桿會重疊到地面，可用object/item shift調整Z軸高度)&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W2/Vrep fourbar combination.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;3.&lt;/span&gt; 請利用 Onshape 完成上述相同尺寸之四連桿機構, 以 stl 轉出 (或其他格式) 後, 再轉入 V-rep&lt;/p&gt;
&lt;p&gt;先在Onshape中繪製出四連桿&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/fourbar in onshape.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cad.onshape.com/documents/8a40a446a6e3a930313e8ca4/w/b9aa548914cf88a0a506e817/e/6f45645181ba9446e1398078"&gt;Onshape四連桿機構&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接著將四連桿匯出，分別有PARASOLID，ACIS
，STEP，IGES，COLLADA，STL的檔案格式&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/onshape format.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;接著在Vrep裡用import裡的Mesh將檔案匯入，發現只能匯入stl檔案&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/Vrep stl.png"width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/Vrep fourbar.png"width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;4.&lt;/span&gt;請在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡&lt;/p&gt;
&lt;p&gt;先利用solvespace在 50 連桿上加上 50-50-50 正三角形，並利用Analyze裡的Trace point繪製出頂點的運動軌跡。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/fourbar trace point.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;5.&lt;/span&gt; 請設法驗證上述四連桿運動軌跡, 是否正確, 並設法在分組網頁中執行該四連桿機構的運動模擬&lt;/p&gt;
&lt;p&gt;接著可利用Stop point 將路徑匯出成csv檔，接著可利用Excel裡的圖表繪製功能驗證軌跡是否相同。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/Excel trace point.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;最後利用課程網誌裡&lt;a href="http://mde.tw/2017springcd/blog/brython-2d-drawing.html"&gt;協同產品設計實習第1週任務&lt;/a&gt;的程式碼去驗證solvespace裡所繪製的運動軌跡。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W3/python trace point.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;結果 :&lt;/p&gt;
&lt;p&gt;cx= -65.20944533000791 cy= 29.544232590366242&lt;/p&gt;
&lt;p&gt;dx= -22.53868820588739 dy= 55.60582284219696&lt;/p&gt;
&lt;p&gt;ex= -66.44406598905394 ey= 79.52898738448577&lt;/p&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;這學期的倉儲的wiki要在不同的地方編輯，還需要時間來適應，還有在做任務一時，明顯的發現到自己英文能力的不足，希望能盡快的補足這方面的能力&lt;/p&gt;
&lt;h2&gt;任務二影片&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/207629426" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/207629426"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W3任務二完成 Solvespace 30-50-60 cm 比例的四連桿組立&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;任務三影片&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/207626453" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/207626453"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W3任務三利用 Onshape 完成四連桿機構, 以 stl 轉出後, 再轉入 V-rep&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;任務四、五影片&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/207920094" width="640" height="454" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/207920094"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W3任務四、任務五&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;</summary><category term="notes"></category><category term="w3"></category></entry><entry><title>2017/03/01 W2</title><link href="./2017spring-cd-W2.html" rel="alternate"></link><published>2017-03-01T11:00:00+08:00</published><updated>2017-03-01T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-03-01:./2017spring-cd-W2.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第二週&lt;/h2&gt;
&lt;p&gt;一.利用python找出缺課人員&lt;/p&gt;
&lt;p&gt;二.在solvespace組立四連桿，並放置到Vrep裡。&lt;/p&gt;


&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;一.&lt;/span&gt;利用python找出缺課人員&lt;/p&gt;
&lt;p&gt;可至班級倉儲data下載W2資料夾裡的cd_w2.py(有填寫座位表的人)和w2b_registered.txt(有修課的人)，接著利用利用程式碼列印出分組名單、座位列表、缺席學生和學生總數。&lt;/p&gt;
&lt;h3&gt;分組座位程式碼&lt;/h3&gt;

&lt;pre class="brush: python"&gt;
#import os
#讀取w2b_cadlab.txt的檔案將其儲存為adata，並設定encoding為utf-8
adata = open("w2b_cadlab.txt", encoding="utf-8").read()
#讀取w2b_registered.txt的檔案將其儲存為rdata，並一行一行隔開，並設定encoding為utf-8
rdata = open("w2b_registered.txt", encoding="utf-8").read().splitlines()
#列印出adata，以便檢查結果
#print(adata)
#利用splitlines將adata一行一行隔開並其儲存為alist
alist = adata.splitlines()
#列印出alist[2]，以便檢查結果
#print(alist[2])
#將變數n儲存為0
n = 0
#將列從0開始算起
row = 0
#將final_list儲存為一個空的數列
final_list = []
#將w2_list儲存為一個空的數列
w2_list = []
#執行一個for迴圈從第二列開始
for stud_num in alist[2:]:
    #每執行完一次迴圈列數+1
    row = row + 1
    #執行完迴圈後用\將其隔開並儲存為blist
    blist = stud_num.split("\t")
    #列印出blist，以便檢查結果
    #print(blist)
    #將行從0開始算起
    column = 0
    #執行一個for迴圈去取得blist裡的數列
    for i in range(len(blist)):
         #每執行完一次迴圈行數+1
        column = column + 1
        #假如blist數列裡不是空白
        if blist[i] != "":
            #列印出blist[i]，以便檢查結果
            #print(blist[i])
            #將組序有用_隔開的儲存為clist 
            clist = blist[i].split("_")
            #將組序+_+學號+_+列+行的資料儲存為stud_data
            stud_data = clist[0]+"_"+clist[1]+"_"+str(row)+"_"+str(column)
             #將stud_data結果附加在final_list的資料裡
            final_list.append(stud_data)
            #將clist[1]結果附加在w2_list的資料裡
            w2_list.append(clist[1])
            #每執行完一次迴圈n+1
            n = n +1
# 根據數列前導字串排序, 目的在建立分組數列
group_list = sorted(final_list)
#列印出分組名單
print("分組名單:")
#執行一個for迴圈去取得group_list裡的數列
for i in range(len(group_list)):
    #列印出 group_list[i]的資料
    print(group_list[i])
#列印出座位列表
print("座位列表:")
#執行一個for迴圈去取得final_list裡的數列
for i in range(len(final_list)):
    #列印出 final_list[i]的資料
    print(final_list[i])
#執行一個for迴圈去取得rdata裡的數列
for i in range(len(rdata)):
    #假如有在rdata裡但沒有在w2_list裡，目的在找出缺席學生
    if rdata[i] not in w2_list:
        #列印出 rdata[i]的資料，缺席學生
        print("缺席學生:", rdata[i])
#列印出學生總數n個
print("學生總數:", n)
#print(os.environ)
&lt;/pre&gt;

&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;二.&lt;/span&gt;在solvespace組立四連桿，並放置到Vrep裡。&lt;/p&gt;
&lt;p&gt;先在solvespace裡繪製出四連桿結構&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W2/fourbar Architecture.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;再將桿子組立起來(利用點與點的重合、線的共線及點與面的重合，限制桿子的作動。)&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W2/fourbar combination.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;最後將四連桿儲存成stl檔`並用Vrep裡的import裡的Mash開啟(開啟時四連桿會重疊到地面，可用object/item shift調整Z軸高度)&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W2/Vrep fourbar combination.png" width="560" /&gt;&lt;/p&gt;
&lt;h2&gt;第二週心得&lt;/h2&gt;
&lt;p&gt;這禮拜理解到了程式碼的方便之處，體驗到了利用程式碼去處理繁雜的資料，r接著開始了解如何使用Vrep，以利之後要設計的八隻腳。&lt;/p&gt;
&lt;h2&gt;第二週心得影片&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/206845385" width="640" height="457" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/206845385"&gt;40423245機械設計工程系 - 協同產品設計實習課程-W2&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;</summary><category term="notes"></category><category term="w2"></category></entry><entry><title>2017/02/22 W1</title><link href="./2017spring-cd-W1.html" rel="alternate"></link><published>2017-02-22T11:00:00+08:00</published><updated>2017-02-22T11:00:00+08:00</updated><author><name>40423245</name></author><id>tag:,2017-02-22:./2017spring-cd-W1.html</id><summary type="html">&lt;h2&gt;2017Spring 協同產品設計實習課程  第一週&lt;/h2&gt;
&lt;p&gt;一.可至&lt;/span&gt;可至&lt;a href="http://mde.tw/2017springcd/blog/2017spring-cd.html"&gt;2017 Spring 協同產品設計實習&lt;/a&gt;觀看這學期的課程大綱&lt;/p&gt;
&lt;p&gt;二.了解如何使用stunnel&lt;/p&gt;
&lt;p&gt;三.利用python程式碼控制Vrep裡的單連桿作動&lt;/p&gt;


&lt;h2&gt;上課筆記&lt;/h2&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;一.&lt;/span&gt;可至&lt;a href="http://mde.tw/2017springcd/blog/2017spring-cd.html"&gt;2017 Spring 協同產品設計實習&lt;/a&gt;觀看這學期的課程大綱，老師介紹了Blender 3dstudio maya的相關性，簡略說明c語言與python的優劣與使用時機。&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;二.&lt;/span&gt;了解如何使用stunnel
，並且嘗試以anonymous（無名氏/遊客）的身份進入https://192.168.1.24/2017springvcp_hw/index。&lt;/p&gt;
&lt;p&gt;在按下start之後，會出現錯誤的圖案&lt;span style="background-color: #55ff55"&gt;(1)&lt;/span&gt;，這是因為stunnel資料夾裡的config/styunnel.conf裡的ip與電腦的ip不同(styunnel.conf裡的分號代表註解)，可至cmd打ipconfig/all的指令，找到電腦的ip位置並將其複製、貼到styunnel.conf裡&lt;span style="background-color: #55ff55"&gt;(2)&lt;/span&gt;，(443為https的Port號不須修改)，如果有設置proxy就必須要到設定proxy的地方按進階，將電腦ip設為額外ip，這樣就可至google打網址，並且嘗試以anonymous（無名氏/遊客）的身份進入https://192.168.1.24/2017springvcp_hw/index。&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #55ff55"&gt;(1)&lt;/span&gt;&lt;img src="./../data/image W1/stunnel Error.png" width="240" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #55ff55"&gt;(2)&lt;/span&gt;&lt;img src="./../data/image W1/stunnel ip位置.png" width="240" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W1/2017springvcp_hw-index.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;三.&lt;/span&gt;利用python程式碼控制Vrep裡的單連桿作動。&lt;/p&gt;
&lt;p&gt;可至&lt;a href="http://github.com/mdecourse/2017springcd"&gt;課程倉儲&lt;/a&gt;的data裡下載fourbar_eightbar_solvespace_vrep.7z以及onelink_vrep_remoteapi_pos_vel.7z兩個檔案，解壓縮後會有三個檔案，分別是單連桿、四連桿及八連桿，可試著在solvespace及Vrep裡開啟。&lt;/p&gt;
&lt;p&gt;在Vrep裡開啟one_link_robot_remoteAPI.ttt的檔案(ttt是Vrep檔案的副檔名)，在SciTE裡開啟one_link_robot_remoteAPI_joint_target_vel.py的檔案，按下Tool裡的Go即可開始控制單連桿，按Enter會旋轉，按P會暫停。&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/jansen_solvespace_2.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W1/fourbar345.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image W1/one_link_robot_remoteAPI.png" width="560" /&gt;&lt;/p&gt;
&lt;h2&gt;第一週心得&lt;/h2&gt;
&lt;p&gt;在經過上學期得學習，發現這學期的課程變得有點難，在每個禮拜最後一堂課還要上台分享，期望能迅速地進入狀況。&lt;/p&gt;
&lt;h2&gt;第一週心得影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/205656178" width="560" height="315" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/205656178"&gt;40423245機械設計工程系-協同產品設計實習課程-W1&lt;/a&gt; from &lt;a href="https://vimeo.com/user47996237"&gt;40423245&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="notes"></category><category term="w1"></category></entry></feed>